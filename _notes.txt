
Formik is a small library helps to deal with forms in React.

Formik used for:
Handle (Managing) form data
validation
Error messages 
handle form submission

4. use formik uses object as its parameter.
useFormik({}) ----> object inside parameter
This object contains the properties and methods to manage form states.

5. handleChange ----> this method is formik's helper to update the values objects.

7. There are three parts of validation:
   values.name 
   errors.name 
   errors.name = 'This field is required

12. We can use this for refactoring the code:

onChange={formik.handleChange}  
onBlur={formik.handleBlur}
alue={formik.values.name}

Instead the above 3 lines we can write 
{...formik.getFieldProps('name')} 

we can write whatever the field name is in place of "name.

13. Formik components: To save time formik provides few components that implicitly uses react context tom make our code less verbose. (shorten the code)
Some components Formik provides:
1. Formik
2. Form
3. field
4. ErrorMessage

Formik component:
import Formik from 'Formik'
Remove useFormik function and put the contents of useFormik inside <Formik>Put here</Formik>
const formik = useFormik({
    initialValues,
    onSubmit,
    validationSchema,
    // validate,
  });


14. Form component:
    1. Import Form from 'Formik'
    2. Replace html form element with Form component
    3. Remove the onSubmit prop  -----> onSubmit={formik.handleSubmit}

15. Field component
    1. import Field from 'Formik'
    2. replace each input tag with Field component tag
    3. get rid of(remove) getFieldProps helper method from each of the fields

16. ErrorMessage Component
    1. import ErrorMessage from 'Formik'
    2. Replace the block of code rendering the error message with ErrorMessage component

     {formik.touched.name && formik.errors.name ? (
            <div className="error">{formik.errors.name}</div>
            ) : null}

            Replace this code by <ErrorMessage />

    3. Pass in a name prop which is equal to the name attribute on the Field Component.

    <ErrorMessage  name="name"/>

    Here, "name" is the name you have give to the field.

17. Field Revisited:
    1 There are some more (additional) props used in Field component.
            1. name="name"
            2. id="id"
            3. placeholder:"Please enter a name"

    2 Ability to render differnt element other than the input element.
            1. Add text area field in form using as

18. Field Revisited:

    3. Render props pattern for more fine grain control over the Form Field
             field, form, meta 

            <Field name="address">
            {(props) => {
              const { field, form, meta } = props;
              console.log("props", props);

              return (
                <div>
                  <input type="text" id="address" {...field} />
                  {meta.touched && meta.error ? <div>{meta.error}</div> : null}
                </div>
              );
            }}
          </Field> 

19 ErrorMessage Revisited ---- various methods to show errors 
    1. using component props
    <ErrorMessage name="name" component={TextError} />
    2. using render props pattern to show error msg
    <ErrorMessage name="email">
            {(errorMsg) => {
              <div className="error">{errorMsg}</div>;
            }}
          </ErrorMessage>

20 Nested Objects  ---- 
    1 creating nested objects in initial values
           const initialValues = {
                social: {
                    facebook: "",
                    twitter: "",
                },
            };

    2 using these nested objects for creating input fields

            <div className="form-control">
                    <label htmlFor="facebook">facebook profile</label>
                    <Field type="text" id="facebook" name="social.facebook" />
                    </div>
                    <div className="form-control">
                    <label htmlFor="twitter">facebook profile</label>
                    <Field type="text" id="twitter" name="social.twitter" />
                    </div>

21 Using arrays -----
    1 creating nested objects in initial values

               const initialValues = {
                    phoneNumbers: ["", ""],
                    };

    2 using these nested objects for creating input fields
          
                <div className="form-control">
                <label htmlFor="primaryPh">Primary phone number</label>
                <Field type="text" id="primaryPh" name="phoneNumbers[0]" />
                </div>
                <div className="form-control">
                <label htmlFor="secondfaryPh">Secondary phone number</label>
                <Field type="text" id="secondfaryPh" name="phoneNumbers[1]" />
                </div>

23 FastField Component ---- stops rerender for other fields in console. Means if we console in address 
field then only the console should render if we write something in address field. 
If we write something in other field then rendering of address console value should not happen.
Please refer to internet.

     1 import {FastField} from "formik";

     2 <FastField name="address">
            {(props) => {
              console.log("Field render");
              const { field, form, meta } = props;
              console.log("props", props);

              return (
                <div>
                  <input type="text" id="address" {...field} />
                  {meta.touched && meta.error ? <div>{meta.error}</div> : null}
                </div>
              );
            }}
          </FastField>

24 When does validation run
    1 Formik run validation after any change eventin the form (onChange)
    2 Formik run validation after any Blur event in any form (onBlur)
    3 Formik run validation after any form submission (attempt to Submit the form ---- onSubmit())

If you domn't want Formik to automatically run validation function.So, for this formik provides two props 
for 1 and 2 scenario.
    1 validateOnChange={false}
                    <Formik
                    validateOnChange={false}
                    > </Formik>

    2 validateOnBlur={false}
                    <Formik
                    validateOnBlur={false}
                    > </Formik>

25 Field Level Validation (another way)

                const validateComments = (value) => {
                let error;
                if (!value) {
                    error = "required c";
                }
                return error;
                };


                    <Field
                as="textarea"
                id="comments"
                name="comments"
----->>>>>      validate={validateComments} 
                ></Field>
                <ErrorMessage name="comments" component={TextError} />

26 Manually trigger form and field level validations:
To manually trigger Formik provides with two helper methods. To access these methods 
we need to use render props pattern of entire form itself.

Use these two methods of validation (formik validation):
1 formik.validateField ----> Validates the particular field
2 formik ----> Validates all the fields

1 setFieldTouched() ----> add the particular field to the touched object
2 setTouched() ----> add multiple field to the touched object ---- It requires object 
as an argunmet for which field touch has to be enabled.

27. Disabling the submit button:
    Two scenarios:
              1. validaity of the form state: -----> Submit button to be disabled if the form 
              state is invalid.
              2. When form dubmission is in progress


  1. validaity of the form state: -----> Submit button to be disabled if the form 
    state is invalid.

    isValid ----> is set to true if the errors object is empty. If there is no any error then
    isValid is true.

  validateOnMount ----> It runs all validations on page Load only. It makes isValid property
  false on page load only (if error comes). This is good for less forms and simple calidations,
  because if we have many forms then there is no use of running validations on every
  page load.

  dirty ----> If you have changed any one of the field values that is different from what 
  was when it was initialized then dirty props become true.


  28. Disabling the submit button: 2
      2. When form submission is in progress (form is submitting in the background)
      while click on any button (api call has been occured) then here we will disable the
       button after clicking oon time, because the user will try to click the button
       multiple times.

       isSubmitting ----> set to true if form submission has been attempted. So, here 
       if isSubmitting is true (means form has been submitted) then disabled the submit 
       button. 

29. enableReinitialize ---- this props can decide whether the form can be changed
the initial values after the form has initialized once with new values.
         